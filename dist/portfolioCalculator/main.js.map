{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/add-transaction/add-transaction.component.css","webpack:///./src/app/add-transaction/add-transaction.component.html","webpack:///./src/app/add-transaction/add-transaction.component.ts","webpack:///./src/app/all-transaction/all-transaction.component.css","webpack:///./src/app/all-transaction/all-transaction.component.html","webpack:///./src/app/all-transaction/all-transaction.component.ts","webpack:///./src/app/app-routing/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/asset-details/asset-details.component.css","webpack:///./src/app/asset-details/asset-details.component.html","webpack:///./src/app/asset-details/asset-details.component.ts","webpack:///./src/app/asset.service.ts","webpack:///./src/app/asset.ts","webpack:///./src/app/current-assets/current-assets.component.css","webpack:///./src/app/current-assets/current-assets.component.html","webpack:///./src/app/current-assets/current-assets.component.ts","webpack:///./src/app/portfolioOverall.ts","webpack:///./src/app/transactions.service.ts","webpack:///./src/app/transactions.ts","webpack:///./src/app/whatIfAsset.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \" /* Customize the label (the radioButton) */\\n .radioButton {\\n    display: block;\\n    position: relative;\\n    padding-left: 35px;\\n    margin-bottom: 12px;\\n    cursor: pointer;\\n    font-size: 22px;\\n    -webkit-user-select: none;\\n    -moz-user-select: none;\\n    -ms-user-select: none;\\n    user-select: none;\\n  }\\n /* Hide the browser's default radio button */\\n .radioButton input {\\n    position: absolute;\\n    opacity: 0;\\n    cursor: pointer;\\n    height: 0;\\n    width: 0;\\n  }\\n /* Create a custom radio button */\\n .checkmark {\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    height: 25px;\\n    width: 25px;\\n    background-color: #eee;\\n    border-radius: 50%;\\n  }\\n /* On mouse-over, add a grey background color */\\n .radioButton:hover input ~ .checkmark {\\n    background-color: #ccc;\\n  }\\n /* When the radio button is checked, add a blue background */\\n .radioButton input:checked ~ .checkmark {\\n    background-color: #2196F3;\\n  }\\n /* Create the indicator (the dot/circle - hidden when not checked) */\\n .checkmark:after {\\n    content: \\\"\\\";\\n    position: absolute;\\n    display: none;\\n  }\\n /* Show the indicator (dot/circle) when checked */\\n .radioButton input:checked ~ .checkmark:after {\\n    display: block;\\n  }\\n /* Style the indicator (dot/circle) */\\n .radioButton .checkmark:after {\\n    top: 9px;\\n    left: 9px;\\n    width: 8px;\\n    height: 8px;\\n    border-radius: 50%;\\n    background: white;\\n  } \"","module.exports = \"<h3 style=\\\"color:royalblue\\\">Add New Transaction</h3>\\n<hr>\\n<div [hidden]=\\\"submitted\\\" class=\\\"container\\\">\\n  \\n</div>\\n<hr>\\n\\n<div [hidden]=\\\"submitted\\\">\\n    <form #transactionForm=\\\"ngForm\\\" [ngStyle]=\\\"{'color':setTransaction()}\\\">\\n\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"symbol\\\">Company Symbol</label>\\n        <input style=\\\"color:yellow\\\" type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"symbol\\\" placeholder=\\\"Give Companies symbol\\\" \\n        required maxlength=\\\"6\\\" pattern=\\\"([0-9A-Za-z.]{1,6})\\\" autofocus \\n        [(ngModel)]=\\\"Transaction.symbol\\\" name=\\\"symbol\\\" #symbol=\\\"ngModel\\\">\\n        <div [hidden]=\\\"symbol.valid || symbol.pristine\\\"\\n             class=\\\"alert alert-danger\\\">\\n            The symbol is not valid\\n        </div>\\n      </div>\\n      \\n\\t    <div class=\\\"form-group\\\">\\n        <label for=\\\"shares\\\">Amount of shares: maximum is 999,999 <p>{{shareCount}}</p></label>\\n        <input style=\\\"color:yellow\\\" type=\\\"number\\\" class=\\\"form-control\\\" id=\\\"shares\\\" placeholder=\\\"Number of shares\\\" \\n        required  pattern=\\\"([0-9]{1,6})\\\"\\n        [(ngModel)]=\\\"Transaction.shares\\\" name=\\\"shares\\\" #shares=\\\"ngModel\\\">\\n        <div [hidden]=\\\"shares.valid || shares.pristine\\\"\\n             class=\\\"alert alert-danger\\\">\\n            Invlid number of shares\\n        </div>\\n      </div>\\n     \\n\\t    <div class=\\\"form-group\\\">\\n        <label for=\\\"price\\\">Price: maximum is $9999.99</label>\\n        <input style=\\\"color:yellow\\\" type=\\\"number\\\" class=\\\"form-control\\\" id=\\\"price\\\" placeholder=\\\"price per share\\\" \\n        required pattern=\\\"^\\\\d{0,4}(\\\\.\\\\d{0,2})?$\\\"  \\n        [(ngModel)]=\\\"Transaction.price\\\" name=\\\"price\\\" #price=\\\"ngModel\\\">\\n        <div [hidden]=\\\"price.valid || price.pristine\\\"\\n             class=\\\"alert alert-danger\\\">\\n            Invalid price\\n        </div>\\n      </div>\\n      \\n\\t      <div class=\\\"form-group\\\">\\n        <label for=\\\"buydate\\\">Transaction Date </label>\\n        <input  type=\\\"date\\\" class=\\\"form-control\\\" id=\\\"buydate\\\" placeholder=\\\"date purchased\\\" \\n        required\\n        [(ngModel)]=\\\"Transaction.buydate\\\" name=\\\"buydate\\\" #buydate=\\\"ngModel\\\">\\n        <div [hidden]=\\\"buydate.valid || buydate.pristine\\\"\\n             class=\\\"alert alert-danger\\\">\\n            date is required\\n        </div>\\n      </div>\\n    \\n      <div class=\\\"form-group\\\">\\n        <div class=\\\"row\\\">\\n          <div>  \\n            <p>Transaction Type</p>\\n            <ul class=\\\"nav justify-content-center\\\">\\n                <li class=\\\"nav-item\\\"  style=\\\"color:white ; background-color: green\\\">\\n                    <label class=\\\"radioButton\\\">BUY\\n                    <input  type=\\\"radio\\\" class=\\\"form-control\\\" name=\\\"Buy\\\" id=\\\"Buy\\\"\\n                    required [value]=\\\"true\\\"\\n                    [(ngModel)]=\\\"Transaction.transaction\\\" #Buy=\\\"ngModel\\\" >\\n                    <span class=\\\"checkmark\\\"></span>\\n                    </label> \\n                </li>\\n                <li class=\\\"nav-item\\\"  style=\\\"color:white ; background-color: red\\\">\\n                        <label class=\\\"radioButton\\\">SELL\\n                        <input  type=\\\"radio\\\" class=\\\"form-control\\\" name=\\\"transaction\\\" id=\\\"transaction\\\"\\n                        required [value]=\\\"false\\\" \\n                        [(ngModel)]=\\\"Transaction.transaction\\\" #transaction=\\\"ngModel\\\" >\\n                        <span class=\\\"checkmark\\\"></span>\\n                        </label> \\n                </li>\\n            </ul>  \\n           \\n            <div [hidden]=\\\"transaction.valid || transaction.pristine\\\"\\n             class=\\\"alert alert-danger\\\">\\n             transaction type is required\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"btn-group btn-group-md\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-dark\\\" (click)=\\\"goBack()\\\">Back</button>\\n      \\t<button type=\\\"button\\\" class=\\\"btn btn-dark\\\" (click)=\\\"grabAsset(Transaction.symbol)\\\" [disabled]=\\\"!transactionForm.form.valid\\\" >Submit</button>      \\n        <button type=\\\"button\\\" class=\\\"btn btn-dark\\\" (click)=\\\"newTransaction()\\\" >Clear</button>\\n      </div>\\n    </form>\\n</div>\\n\\n<div [hidden]=\\\"!submitted\\\">\\n  <p>Submitted Successfully!<span class=\\\"badge badge-light\\\"></span></p>\\n \\n  <div class=\\\"btn-group btn-group-sm\\\">\\n    \\t<button type=\\\"button\\\" class=\\\"btn btn-dark\\\" (click)=\\\"goBack()\\\">Back</button>\\n    \\t<button type=\\\"button\\\" class=\\\"btn btn-dark\\\" (click)=\\\"newTransaction(); transactionForm.reset()\\\">Add Another Transaction</button>\\n    </div>\\n</div>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { transaction } from '../transactions';\nimport { asset } from '../asset';\nimport { AssetService } from '../asset.service';\nimport { TransactionsService } from '../transactions.service';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-add-transaction',\n  templateUrl: './add-transaction.component.html',\n  styleUrls: ['./add-transaction.component.css']\n})\nexport class AddTransactionComponent  implements OnInit{\n\n  Transaction = new transaction();\n  submitted = false;\n  assetIsNew = true;\n  newAsset = new asset();\n  existingAsset = new asset();\n  passedInShares: any;\n  shareCount: string;\n\n  constructor(\n    private assetService: AssetService,\n    private transactionService: TransactionsService,\n    private location: Location,\n    private route: ActivatedRoute,\n  ) { }\n\n  // upon initialization set the transaction to true/buy and the colors to green\n  ngOnInit()\n  {\n      // Get any parmaeter passed in from url\n      const passedInSymbol =  this.route.snapshot.paramMap.get('symbol');\n      this.Transaction.symbol = passedInSymbol;\n      this.passedInShares = this.route.snapshot.paramMap.get('shares');\n      if ( this.passedInShares )\n      { this.shareCount = \"You currently have this many shares : \"+this.passedInShares;}\n      if (passedInSymbol != null)\n      {\n        this.assetIsNew = false;\n      }\n  }\n\n  // Change the trasnaction from buy to sell or vice versa, change colors of input fields\n  private setTransaction(): void {\n    if ( this.Transaction.transaction === true )\n    {\n      document.getElementById(\"symbol\").style.background=\"rgb(76, 243, 76)\";\n      document.getElementById(\"shares\").style.background=\"rgb(76, 243, 76)\";\n      document.getElementById(\"price\").style.background=\"rgb(76, 243, 76)\";\n      document.getElementById(\"buydate\").style.background=\"rgb(76, 243, 76)\";\n    }\n    else if ( this.Transaction.transaction === false )\n    {\n      document.getElementById(\"symbol\").style.background=\"rgb(253, 65, 65)\";\n      document.getElementById(\"shares\").style.background=\"rgb(253, 65, 65)\";\n      document.getElementById(\"price\").style.background=\"rgb(253, 65, 65)\";\n      document.getElementById(\"buydate\").style.background=\"rgb(253, 65, 65)\";\n    }\n    else\n    {\n      document.getElementById(\"symbol\").style.background=\"rgb(0, 0, 0)\";\n      document.getElementById(\"shares\").style.background=\"rgb(0, 0, 0)\";\n      document.getElementById(\"price\").style.background=\"rgb(0, 0, 0)\";\n      document.getElementById(\"buydate\").style.background=\"rgb(0, 0, 0)\";\n    }\n  }\n\n  // new form, reset the state excep for the transaction state we will keep that the same\n  newTransaction(): void {\n    const saveTransaction = this.Transaction.transaction;\n    this.Transaction = new transaction();\n    this.newAsset = new asset();\n    this.existingAsset = new asset();\n    // if ( saveTransaction === true ) {\n    //   this.setTransaction(true);\n    //   }\n    // else  {\n    //   this.setTransaction(false);\n    //   } \n    this.submitted = false;\n    this.assetIsNew = true;\n  }\n\n   // This function will grab the asset with the symbolName from the database and call the updateAsset functio, \n  // or return an error\n  private grabAsset(symbolName: string): void{\n    this.assetService.getAsset(symbolName)\n      .subscribe(value => this.existingAsset = value ,\n                 error =>  alert(\"Error connecting to database to grab an asset\") , \n                 ()  => this.verifyIfAssetExists()\n                );           \n}\n\n// Establish if an asset exists or not\n verifyIfAssetExists() {\n   // validate symbol name\n   if (this.Transaction.symbol.length > 6 )\n   {\n      alert(\"Error:  Symbol must be less than 6 characters long\")\n   }else {\n     new Promise(res=>{\n        // set total\n        this.Transaction.total = this.Transaction.shares * this.Transaction.price;\n        // start process to check if asset exists by grabbing asset synbol from database\n        // check to see if we successfully pulled the asset from the database\n        if (this.existingAsset == null)\n        {\n          // If we reached here it means the asset DOES NOT EXIST \n          if(this.Transaction.transaction === false)\n          {\n            throw \"Error, You cannot have a sell order for an Asset you do not own\";\n          }\n          return res();\n        }\n          else\n          {\n          this.assetIsNew = false;\n          return res();\n          }\n     }).then(res=>{\n        if (this.assetIsNew === false)\n        {\n          // If we successfully grabbed the asset from the database\n          this.updateExistingAsset(this.existingAsset, this.Transaction, this.assetService,this.transactionService) \n        } else {\n          // If this is a new asset, set the symbol and all params to 0 and pass it\n          this.newAsset.symbol = this.Transaction.symbol;\n          this.updateExistingAsset(this.newAsset, this.Transaction, this.assetService,this.transactionService) \n        }\n     }).catch(err=>{\n          alert(err);\n     })\n   }\n }\n\n  // This takes 5 arguments and updates the asset in the database with the transaction recorded\n  // depending on whether it is a buy or a sell order we will increase/decrease the totals\n  private updateExistingAsset(assetToUpdate : asset, currentTransaction : transaction,\n                               currentAssetService : AssetService, \n                              currentTransactionService : TransactionsService): void {   \n      // Because some calculations rely on others to complete first, we will execute these in a nested promise\n      new Promise( function(resolve, reject) { \n            // Check to make sure use is not trying to buy over the limit\n            var regexp2 = /^\\d{7}$/;\n            if ( regexp2.test(currentTransaction.shares.toString()) )\n            {\n              throw(\"The number of shares you are trying to purchase is too high\")\n            }\n            return resolve();\n      }).then(res=>{\n            // Check to see whether this is a buy(true) or sell(false) and act accordingly\n            if (currentTransaction.transaction === true )\n            {\n              assetToUpdate.shares += currentTransaction.shares;\n              assetToUpdate.totalMoneyIn =   assetToUpdate.totalMoneyIn * 1 +  currentTransaction.total;\n            }\n            else {\n              assetToUpdate.shares -= currentTransaction.shares;\n              assetToUpdate.sharesSold += currentTransaction.shares;\n              assetToUpdate.totalMoneyOut = assetToUpdate.totalMoneyOut * 1 + currentTransaction.total;\n            }\n            return ;\n      }).then(res=> { \n            // check and throw an error if this order will push shares below 0\n            if ( assetToUpdate.shares < 0 )\n            {\n              alert(\"shares \" + assetToUpdate.shares)\n              throw (\"Sorry, you do not have enough shares to fill this order\");\n            }\n            // check to make sure the shares we are trying to buy are a whole number\n            if ( !Number.isInteger(assetToUpdate.shares) )\n            {\n              throw (\"The number of shares entered is NOT a whole number\");\n            }\n            assetToUpdate.originalMoney = assetToUpdate.totalMoneyIn - assetToUpdate.totalMoneyOut;\n            // set the price to be the user entered transaction price\n            assetToUpdate.price = currentTransaction.price;\n            return ;\n      }).then(res=>{\n            // If originalMoney is less than 0, change the value to 0, means \"we are in the money\"\n            if (assetToUpdate.originalMoney < 0 )\n            {\n              assetToUpdate.originalMoney = 0;\n            }\n            // Calculate current Total \n            assetToUpdate.currentTotal = assetToUpdate.shares * assetToUpdate.price;\n      }).then(res=> {\n           // Calculate the Realized and Unrealized profit\n            assetToUpdate.realProfit = assetToUpdate.totalMoneyOut - assetToUpdate.totalMoneyIn;\n            assetToUpdate.unRealProfit = (assetToUpdate.totalMoneyOut - assetToUpdate.totalMoneyIn) + assetToUpdate.currentTotal;\n            return;\n      }).then(res=> {\n           // Calculate the Realized and Unrealized Margins\n            assetToUpdate.realMargin = (assetToUpdate.realProfit / assetToUpdate.totalMoneyIn) * 100;\n            assetToUpdate.unRealMargin = (assetToUpdate.unRealProfit / assetToUpdate.totalMoneyIn) * 100;\n            return;\n       }).then(res=> { \n            // calculate avgPrices only if shares are greate than 0\n            if ( assetToUpdate.shares > 0  && assetToUpdate.originalMoney > 0)\n            {\n              assetToUpdate.avgprice = assetToUpdate.originalMoney / assetToUpdate.shares;\n            }\n            // Calculate avgPrirce of assets sold if transaction is a sell order\n            if (currentTransaction.transaction === false )\n            {\n              assetToUpdate.avgpriceSold = assetToUpdate.totalMoneyOut  / assetToUpdate.sharesSold ;\n            }\n            return ;         \n      }).then(res=>{\n          // Calculate gain on the transaction\n           currentTransaction.gain = (currentTransaction.price - assetToUpdate.avgprice) / assetToUpdate.avgprice * 100;\n          // if this is NOT a new asset we will call updateAsset, otherwise we will create the new asset\n          if (this.assetIsNew === false)\n          {\n            currentAssetService.updateAsset(assetToUpdate)\n            .subscribe(\n                success => this.submitted = true,\n                error   => {throw\"Failed to update asset\"}\n            )\n          } else {\n            this.assetService.createAsset(assetToUpdate)\n            .subscribe( \n                        value =>   this.submitted = true ,\n                        error =>  alert(\"Could not add this asset !\")\n                      );\n          }\n            return ;  \n      }).then(res=>{\n            // If we have made it up to this point then it is safe to save the transaction as well.\n            currentTransactionService.addTransaction(currentTransaction)\n            .subscribe();\n            // And we can also set the submit variable to true, indicating a successful transaction\n            \n      }).catch(error=>{\n            // Catch any errors that occur\n            alert(\"error occured: \" + error);\n      });\n\n  }\n  \n  goBack(): void {\n    this.location.back();\n  }\n}\n","module.exports = \"td\\r\\n{\\r\\n    padding:0 15px 0 15px;\\r\\n}\\r\\n\"","module.exports = \"<h5 style=\\\" color: purple;\\\" >All Assets I Am Currently Holding</h5>\\r\\n<div>\\r\\n<table >\\r\\n  <thead>\\r\\n    <tr>\\r\\n      <th>ID</th>\\r\\n      <th>Symbol</th>\\r\\n      <th>Shares</th>\\r\\n      <th>Price</th>\\r\\n      <th>Date</th>\\r\\n      <th>Total</th>\\r\\n    </tr>\\r\\n  </thead>\\r\\n  <tbody>\\r\\n      \\r\\n    <tr *ngFor=\\\"let asset of assets\\\" id=\\\"talberow\\\" \\r\\n    [style.background-color]=\\\"asset.transaction == false ? 'red' : 'green'\\\" \\r\\n    style=\\\"color:white\\\">\\r\\n      <td>{{ asset.id }}</td>\\r\\n      <a [routerLink]=\\\"['/current', asset.symbol]\\\" >\\r\\n      <td><span class=\\\"badge badge-dark\\\">{{ asset.symbol }}</span> </td>\\r\\n      </a>\\r\\n      <td>{{ asset.shares }}</td>\\r\\n      <td>${{ asset.price }}</td>\\r\\n      <td>{{ asset.buydate }}</td>   \\r\\n      <td>${{ asset.total }}</td>\\r\\n      <br>\\r\\n    </tr>\\r\\n  \\r\\n  </tbody>\\r\\n</table>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { transaction } from '../transactions';\r\nimport { TransactionsService } from '../transactions.service';\r\n\r\n@Component({\r\n  selector: 'app-all-transaction',\r\n  templateUrl: './all-transaction.component.html',\r\n  styleUrls: ['./all-transaction.component.css']\r\n})\r\nexport class AllTransactionComponent implements OnInit {\r\n\r\n assets: transaction[];\r\n\r\n constructor(private transactionService: TransactionsService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getAssets();\r\n   \r\n  }\r\n\r\n  getAssets(){\r\n     return this.transactionService.getAllTransactions()\r\n    .subscribe(\r\n      assets => {\r\n       this.assets = assets;\r\n      }\r\n     );    \r\n  }\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CurrentAssetsComponent  } from '../current-assets/current-assets.component';\r\nimport { AddTransactionComponent } from '../add-transaction/add-transaction.component';\r\nimport { AllTransactionComponent } from '../all-transaction/all-transaction.component';\r\nimport { AssetDetailsComponent   } from '../asset-details/asset-details.component';\r\n\r\nconst routes: Routes = [\r\n   { \r\n    path: 'currentAssets', \r\n    component: CurrentAssetsComponent \r\n   }, \r\n   { \r\n    path: 'currentAssets/:symbol', \r\n    component: AssetDetailsComponent \r\n   },\r\n   { \r\n    path: 'Transactions/history', \r\n    component: AllTransactionComponent \r\n   },\r\n   { \r\n    path: 'Transactions/add/:symbol/:shares', \r\n    component: AddTransactionComponent \r\n   },\r\n   { \r\n    path: 'Transactions/add', \r\n    component: AddTransactionComponent \r\n   },\r\n   { \r\n     path: '', \r\n     redirectTo: 'currentAssets', \r\n     pathMatch: 'full'\r\n   }, \r\n];\r\n\r\n@NgModule({\r\n  imports: [ RouterModule.forRoot(routes) ],\r\n  exports: [ RouterModule ]\r\n})\r\n\r\nexport class AppRoutingModule {}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-6\\\">  \\r\\n      <h1>My Asset Profit Calculator</h1>\\r\\n      <ul class=\\\"nav justify-content-center\\\">\\r\\n          <li class=\\\"nav-item\\\">\\r\\n              <a routerLink=\\\"currentAssets\\\" class=\\\"btn btn-light btn-sm\\\" role=\\\"button\\\" routerLinkActive=\\\"active\\\">Current Assets</a> \\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\">\\r\\n              <a routerLink=\\\"Transactions/history\\\" class=\\\"btn btn-light btn-sm\\\" role=\\\"button\\\" routerLinkActive=\\\"active\\\">Show All Transactions</a>\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a routerLink=\\\"Transactions/add\\\" class=\\\"btn btn-light btn-sm\\\" role=\\\"button\\\" routerLinkActive=\\\"active\\\">Enter New Transaction (Asset)</a>\\r\\n          </li>\\r\\n      </ul>\\r\\n      <hr>\\r\\n      <router-outlet></router-outlet>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n\r\nconstructor(){}\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { FormsModule }   from '@angular/forms';\r\nimport { HttpClientModule }    from '@angular/common/http';\r\n\r\nimport { AppRoutingModule }     from './app-routing/app-routing.module';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { CurrentAssetsComponent } from './current-assets/current-assets.component';\r\nimport { AddTransactionComponent } from './add-transaction/add-transaction.component';\r\nimport { AllTransactionComponent } from './all-transaction/all-transaction.component';\r\nimport { AssetDetailsComponent } from './asset-details/asset-details.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    CurrentAssetsComponent,\r\n    AddTransactionComponent,\r\n    AllTransactionComponent,\r\n    AssetDetailsComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    AppRoutingModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"#container {\\n    height: 100%;\\n    width: 200%;\\n    display: flex;\\n  }\\n\\n  #leftForm {\\n    width: 100%;\\n    background-color: blue;\\n  }\\n\\n  #rightForm {\\n    width: 100%;\\n    background-color: green;\\n  }\\n\\n  #middleForm {\\n    width: 10%;\\n    background-color: white;\\n    \\n  }\\n\\n  #tableBorder, td {\\n    color: antiquewhite;\\n    border: 1px solid white;\\n    padding:0 15px 0 15px; \\n  }\\n\\n  th, #gold {\\n    color: gold;\\n  }\\n\\n  #Margin1 {\\n    margin: 35px 0px 35px 0px\\n  }\\n\\n  #heading {\\n    text-align: center;\\n    font-size: 16pt;\\n    color: yellowgreen;\\n  }\\n\\n  #heading2 {\\n    text-align: right;\\n    font-size: 24pt;\\n    color: black;\\n  }\\n\\n  #tableClean {\\n    border: 0px transparent white;\\n    padding:0 15px 0 15px; \\n  }\"","module.exports = \"<h6 id=\\\"heading2\\\">Asset - {{myAsset.symbol}}  - OVERVIEW <button [routerLink]=\\\"['/Transactions/add', myAsset.symbol, displayAsset.shares]\\\" routerLinkActive=\\\"active\\\" type=\\\"button\\\" >Trade</button></h6>\\n<div id=\\\"container\\\">\\n  <div id=\\\"leftForm\\\">\\n    <div id=\\\"heading\\\">CURRENT PRICE   ${{displayAsset.price}} PER SHARE   </div>  \\n                  <label for=\\\"newPrice\\\">New Price </label>\\n                  <input type=\\\"number\\\" class=\\\"form-control\\\" id=\\\"newPrice\\\" placeholder=\\\"price per share\\\" \\n                  required [(ngModel)]=\\\"newPrice\\\" #symbol=\\\"ngModel\\\" name=\\\"newPrice\\\" >\\n                <button type=\\\"button\\\" (click)=\\\"updatePrice(newPrice)\\\" >UPDATE PRICE</button>\\n      <table id=\\\"Margin1 tableClean\\\">\\n            <thead>\\n                <tr>\\n                        <th></th>\\n                        <th>SHARES</th>\\n                        <th>AVG PRICE</th>\\n                        <th>CURRENT PRICE</th>\\n                        <th>CURRENT TOTAL</th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n                <tr>\\n                        <td id=\\\"gold\\\">CURRENT</td>\\n                        <td>{{displayAsset.shares}}</td>\\n                        <td>${{displayAsset.avgprice}}</td>\\n                        <td>${{displayAsset.price}}</td>\\n                        <td>${{displayAsset.currentTotal}}</td>\\n                </tr>\\n            </tbody>\\n            <thead>\\n                <tr>\\n                        <th></th>\\n                        <th>SOLD SHARES</th>\\n                        <th>AVG PRICE SOLD</th>\\n                        <th>TOTAL $ SOLD</th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n                <tr>\\n                        <td id=\\\"gold\\\">SOLD</td>\\n                        <td>{{displayAsset.sharesSold}}</td>\\n                        <td>${{displayAsset.avgpriceSold}}</td>\\n                        <td>${{displayAsset.totalMoneyOut}}</td>\\n                </tr>\\n            </tbody>\\n            <thead>\\n                <tr>\\n                    <th></th>\\n                    <th>REALIZED</th>\\n                    <th>MARGIN</th>\\n                    <th>UNREALIZED</th>\\n                    <th>MARGIN</th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n                <tr></tr>\\n                <tr>\\n                    <td id=\\\"gold\\\">PROFIT</td>\\n                    <td>${{displayAsset.realProfit}}</td>\\n                    <td>%{{displayAsset.realMargin}}</td>\\n                    <td>${{displayAsset.unRealProfit}}</td>\\n                    <td>%{{displayAsset.unRealMargin}}</td>\\n                </tr>\\n            </tbody>\\n            <thead>\\n                <tr>\\n                    <th></th>\\n                    <th>TOTAL $ INVESTED</th>\\n                    <th>TOTAL $ WITHDRAWN</th>\\n                    <th>ORIGINAL $ LEFT</th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n                <tr></tr>\\n                <tr>\\n                  <td id=\\\"gold\\\">MORE INFROMATION</td>\\n                  <td>${{displayAsset.totalMoneyIn}}</td>\\n                  <td>${{displayAsset.totalMoneyOut}}</td>\\n                  <td>${{displayAsset.originalMoney}}</td>\\n                </tr>\\n            </tbody>\\n        </table>       \\n        <table id=\\\"Margin1\\\">\\n            <thead>\\n                <tr>\\n                    <th></th>\\n                    <th id=\\\"heading\\\">WHAT IF SCENARIO</th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n                <tr>\\n                        <td>What if I sold at this price right now?</td>\\n                        \\n                        \\n                        <td>\\n                        <form #form=\\\"ngForm\\\">\\n                            <div class=\\\"form-group\\\">\\n                                <label for=\\\"whatIfPrice\\\">Price</label>\\n                                <input type=\\\"number\\\" class=\\\"form-control\\\" placeholder=\\\"price\\\" id=\\\"whatIfPrice\\\"\\n                                    required pattern=\\\"^\\\\d{0,4}(\\\\.\\\\d{0,2})?$\\\"\\n                                    [(ngModel)]=\\\"whatIf.whatIfPrice\\\" #whatIfPrice=\\\"ngModel\\\" name=\\\"whatIfPrice\\\" >\\n                                <div [hidden]=\\\"whatIfPrice.valid || whatIfPrice.pristine\\\"\\n                                    class=\\\"alert alert-danger\\\">\\n                                    Invalid price\\n                                </div>\\n                            </div>\\n                        </form>\\n                        </td>\\n                        <td><button type=\\\"button\\\" (click)=\\\"whatIfScenario(whatIfPrice)\\\">WHAT IF?</button></td>\\n                </tr>\\n                <tr>\\n                    <td>Total Money I would Get</td>\\n                    <td>${{whatIf.totalMoneyOut}}</td>\\n                </tr>\\n                <tr>\\n                    <td>Pure Profit</td>\\n                    <td>${{whatIf.pureProfit}}</td>\\n                </tr>\\n                <tr>\\n                    <td>Margin</td>\\n                    <td>%{{whatIf.pureProfitMargin}}</td>\\n                </tr>\\n                <tr>\\n                    <td>HOW MANY SHARES DO I NEED TO SELL TO GET MY ORIGINAL MONEY BACK?</td>\\n                    <td>{{whatIf.sharesToSell}}</td>\\n                </tr>\\n            </tbody>\\n        </table>\\n  </div>\\n  <div id=\\\"rightForm\\\">\\n        <ul class=\\\"nav justify-content-center\\\">\\n                <li class=\\\"nav-item\\\">\\n                        <button (click)=\\\"displayTransactions('true')\\\" style=\\\"color:whitesmoke; background-color:green\\\">ONLY BOUGHT TRANSACTIONS</button>\\n                </li>\\n                <li class=\\\"nav-item\\\">\\n                        <button (click)=\\\"displayTransactions('false')\\\" style=\\\"color:whitesmoke; background-color:red\\\">ONLY SOLD TRANSACTIONS</button>\\n                </li>\\n                <li class=\\\"nav-item\\\">\\n                        <button (click)=\\\"displayTransactions('all')\\\" style=\\\"color:black; background-color:whitesmoke\\\" >ALL TRANSACTIONS</button>\\n                </li>\\n            </ul>\\n      <p id=\\\"heading\\\">MY TRANSACTIONS</p>\\n        <table id=\\\"tableClean\\\">\\n                <thead>\\n                  <tr>\\n                    <th>Shares</th>\\n                    <th>Price</th>\\n                    <th>Date</th>\\n                    <th>Total</th>\\n                    <th>Gain</th>\\n                  </tr>\\n                </thead>\\n                <tbody>\\n                    \\n                  <tr *ngFor=\\\"let transaction of transactions\\\" \\n                  [style.background-color]=\\\"transaction.transaction == false ? 'red' : 'green'\\\" \\n                  style=\\\"color:white\\\">\\n                    <td>{{ transaction.shares }}</td>\\n                    <td>${{ transaction.price }}</td>\\n                    <td>{{ transaction.buydate }}</td>   \\n                    <td>${{ transaction.total }}</td>\\n                    <td>{{transaction.total}}%</td>\\n                    <br>\\n                  </tr>\\n                \\n                </tbody>\\n              </table>\\n  </div>\\n  \\n</div>\\n\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { transaction }              from '../transactions';\nimport { asset }                    from '../asset';\nimport { whatIfAsset }              from '../whatIfAsset';\nimport { AssetService }             from '../asset.service';\nimport { TransactionsService }      from '../transactions.service';\nimport { ActivatedRoute, Params }   from '@angular/router';\nimport { Location }                 from '@angular/common';\n\n@Component({\n  selector: 'app-asset-details',\n  templateUrl: './asset-details.component.html',\n  styleUrls: ['./asset-details.component.css']\n})\nexport class AssetDetailsComponent implements OnInit {\n  myAsset        = new asset();\n  displayAsset = new asset();\n  transactions:     transaction[];\n  newPrice:         number = 0;\n  // what if scenario below\n  whatIf         = new whatIfAsset();\n\n  constructor( \n    private assetService: AssetService,\n    private transactionService: TransactionsService,\n    private location: Location,\n    private route: ActivatedRoute\n    ) { }\n\n  ngOnInit() {\n   this.grabAssetAndConvert();\n  }\n\n  private grabAssetAndConvert(): void {\n     // Fetch our asset from DB and convert the numbers into strings, 'symbol' is param passed by router\n     this.assetService.getAsset( this.route.snapshot.paramMap.get('symbol'))\n     .subscribe(\n                value => { // upon success, set value and call function to convert  \n                        this.myAsset = value, \n                        this.convert()\n                      }, \n                error => alert(\"This symbol does not exist\"),\n                () => this.displayTransactions(\"all\") \n              );      \n  }\n\n  // convert number and decimals like 1111.42 into 1,111.00\n  private convert(): void {\n    this.displayAsset.shares = this.myAsset.shares.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    this.displayAsset.sharesSold = this.myAsset.sharesSold.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    this.displayAsset.avgprice = this.myAsset.avgprice.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    this.displayAsset.avgpriceSold = this.myAsset.avgpriceSold.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    this.displayAsset.originalMoney = this.myAsset.originalMoney.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    this.displayAsset.totalMoneyIn = this.myAsset.totalMoneyIn.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    this.displayAsset.totalMoneyOut = this.myAsset.totalMoneyOut.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    this.displayAsset.price = this.myAsset.price.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    this.displayAsset.currentTotal = this.myAsset.currentTotal.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    this.displayAsset.realProfit = this.myAsset.realProfit.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    this.displayAsset.realMargin = this.myAsset.realMargin.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    this.displayAsset.unRealProfit = this.myAsset.unRealProfit.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    this.displayAsset.unRealMargin = this.myAsset.unRealMargin.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n  }\n\n  private updatePrice(newPrice:number): void {\n      // This will uodate the current price as well as calculate the currentTotal and other totals.\n      new Promise(res=>{\n        this.myAsset.price = newPrice;\n        return res();\n      }).then(res=>{\n        this.myAsset.currentTotal = this.myAsset.price * this.myAsset.shares;\n      }).then(res=> {\n        this.myAsset.realProfit = this.myAsset.totalMoneyOut - this.myAsset.totalMoneyIn;\n        this.myAsset.unRealProfit = this.myAsset.totalMoneyOut * 1 + this.myAsset.currentTotal - this.myAsset.totalMoneyIn;\n      }).then(res=> {\n        this.myAsset.realMargin =   this.myAsset.realProfit / this.myAsset.totalMoneyIn  * 100;\n        this.myAsset.unRealMargin = this.myAsset.unRealProfit / this.myAsset.totalMoneyIn * 100;\n      }).then(res => {\n        this.assetService.updateAsset(this.myAsset)\n        .subscribe(res=> this.grabAssetAndConvert(), err=> alert(\"failed to update asset\"))\n      }).catch(err =>{\n          alert(\"error when trying to update Price \" + err)\n      });\n  }\n\n  private displayTransactions(displayType: string): void {\n    // return transactions based on transactions being true, false or all\n      this.transactionService.getTransactionsByAsset(displayType,this.myAsset.symbol)\n      .subscribe(\n                  res=> this.transactions = res,\n                  err=> alert(\"failed to connect to database\"),\n                  () => this.convertTransactions()\n                );\n  }\n\n  private whatIfScenario(): void {\n      // We will calculate the prices for the what if scenario\n      new Promise(res => {\n        // how much money we will get out at the what if price\n        this.whatIf.totalMoneyOut = this.whatIf.whatIfPrice * this.myAsset.shares;\n        return res();\n      }).then(res =>{\n        // how much profit will we make \n        this.whatIf.pureProfit = this.whatIf.totalMoneyOut - this.myAsset.originalMoney;\n        return;\n      }).then(res =>{\n        // calculate profit margin\n        this.whatIf.pureProfitMargin = ( this.whatIf.pureProfit  / this.myAsset.originalMoney ) * 100\n      }).then(res =>{\n        // how many shares do we need to sell to get our ORIGINAL MONEY back\n        this.whatIf.sharesToSell = this.myAsset.originalMoney / this.whatIf.whatIfPrice ;\n      }).then(res =>{\n        // round all the values\n        this.whatIf.totalMoneyOut =  this.whatIf.totalMoneyOut.toFixed(2);\n        this.whatIf.pureProfit = this.whatIf.pureProfit.toFixed(2);\n        this.whatIf.pureProfitMargin = this.whatIf.pureProfitMargin.toFixed(2);\n        this.whatIf.sharesToSell = Math.round(this.whatIf.sharesToSell);\n      }).then(res=>{\n        // convert to strings for user appeal ex 1000 to 1,000\n        this.whatIf.totalMoneyOut =  this.whatIf.totalMoneyOut.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n        this.whatIf.pureProfit = this.whatIf.pureProfit.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n        this.whatIf.pureProfitMargin = this.whatIf.pureProfitMargin.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n        this.whatIf.sharesToSell = this.whatIf.sharesToSell.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n      })\n  }\n\n  // convert the format of the transactions from 100000 to 1,000,000.00\n  private convertTransactions(): void{\n    this.transactions.forEach(element => {\n      element.price = element.price.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n      element.total = element.total.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n      element.shares = element.shares.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { asset } from './asset';\nimport {map} from 'rxjs/operators';\nimport { Observable} from 'rxjs';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AssetService {\n  private Url = 'http://localhost:8080/api/';  // URL to web api\n\n  constructor(private http: HttpClient) { }\n\n  // Return a single asset from the database table assets\n  getAsset(symbol: string): Observable<asset> {\n    const url = `${this.Url + 'currentassets'}/${symbol}`;\n    let existingAsset = new asset();\n    //return this.http.get<asset>(this.Url+'currentassets'+'/'+symbol);\n    return this.http.get<asset>(url);\n  }\n\n  // return all assets from the database table assets\n  getAllAssets (): Observable<asset[]> {\n    return this.http.get<asset[]>(this.Url+'currentassets')\n  }\n\n  // create an asset\n  createAsset(asset: asset): Observable<asset> {\n    return this.http.post<asset>(this.Url+'currentassets', asset, httpOptions);\n  }\n\n  // update an asset in database\n  updateAsset (asset: asset): Observable<any> {\n    return this.http.put(this.Url+'currentassets', asset, httpOptions);\n  }\n}\n","export class asset {\n    symbol: string;\n    shares:        any = 0;\n    avgprice:      any = 0;\n    sharesSold:    any= 0;\n    avgpriceSold:  any= 0;\n    originalMoney: any= 0;\n    totalMoneyIn:  any= 0;\n    totalMoneyOut: any= 0;\n    price:         any= 0;\n    currentTotal:  any= 0;\n    realProfit:    any= 0;\n    realMargin:    any= 0;\n    unRealProfit:  any= 0;\n    unRealMargin:  any= 0;\n}\n\n","module.exports = \"table, th, td\\r\\n{\\r\\n    border: 1px solid white;\\r\\n    padding:0 15px 0 15px;\\r\\n    background-color:blue;\\r\\n    color:white;\\r\\n}\\r\\n\\r\\nbutton {\\r\\n    background-color:blue;\\r\\n    color:white;\\r\\n    border-radius: 8px;\\r\\n    width: 75px;\\r\\n}\"","module.exports = \"<div>\\r\\n<h4 style=\\\" color: purple;\\\" >OVERALL   </h4>\\r\\n<table>\\r\\n  <thead>\\r\\n    <th>CURRENT TOTAL (UNREALIZED):</th>\\r\\n    <th>ORIGINAL INVESTMENT $ LEFT: </th>\\r\\n    <th>TOTAL $ INVESTED: </th>\\r\\n    <th>TOTAL $ PULLED OUT: </th>\\r\\n  </thead>\\r\\n  <tbody>\\r\\n    <tr>\\r\\n      <th>${{portfolio.currentTotal}}</th>\\r\\n      <th>${{portfolio.originalMoney}}</th>\\r\\n      <th>${{portfolio.totalMoneyIn}}</th>\\r\\n      <th>${{portfolio.totalMoneyOut}}</th>\\r\\n    </tr>\\r\\n  </tbody>\\r\\n</table>\\r\\n</div>\\r\\n<hr>\\r\\n<h5 style=\\\" color: purple;\\\" >All Assets I Am Currently Holding</h5>\\r\\n<div class=\\\"btn-group btn-group-sm\\\">\\r\\n<table >\\r\\n  <thead>\\r\\n    <tr> \\r\\n      <th>Symbol</th>\\r\\n      <th>Current Price</th>\\r\\n      <th>Total Shares</th>\\r\\n      <th>Current Total</th>\\r\\n    </tr>\\r\\n  </thead>\\r\\n  <tbody >\\r\\n      \\r\\n    <tr *ngFor=\\\"let asset of assets\\\" [ngClass]=\\\"'tablerow'\\\">\\r\\n        <td><button type=\\\"button\\\"  [routerLink]=\\\"['/currentAssets/', asset.symbol]\\\" routerLinkActive=\\\"active\\\" >{{ asset.symbol }}</button></td>\\r\\n        <td>${{ asset.price }}</td>\\r\\n        <td>{{ asset.shares }}</td>\\r\\n        <td>${{ asset.currentTotal }}</td>\\r\\n        <button [routerLink]=\\\"['/Transactions/add', asset.symbol, asset.shares]\\\" routerLinkActive=\\\"active\\\" type=\\\"button\\\" >Trade</button>\\r\\n        <button type=\\\"button\\\"  [routerLink]=\\\"['/currentAssets/', asset.symbol]\\\" routerLinkActive=\\\"active\\\" >DETAILS</button>\\r\\n        <p></p>\\r\\n      <br>\\r\\n    </tr>\\r\\n  \\r\\n  </tbody>\\r\\n</table>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { asset } from '../asset';\r\nimport { AssetService } from '../asset.service';\r\nimport { portfolio } from '../portfolioOverall';\r\n\r\n@Component({\r\n  selector: 'app-current-assets',\r\n  templateUrl: './current-assets.component.html',\r\n  styleUrls: ['./current-assets.component.css']\r\n})\r\nexport class CurrentAssetsComponent implements OnInit {\r\n\r\n  assets: asset[];\r\n  portfolio = new portfolio();\r\n  totOut: number = 0;\r\n  totIn: number = 0;\r\n  currTotal: number = 0;\r\n  orgMoney: number = 0;\r\n  \r\n  constructor(private assetService: AssetService) { }\r\n \r\n\r\n  ngOnInit(): void {\r\n   this.getAssets(); \r\n  }\r\n\r\n  getAssets(){\r\n    return this.assetService.getAllAssets()\r\n    .subscribe(\r\n      thisCanBeAnything => {\r\n       this.assets = thisCanBeAnything;\r\n       this.calculate(this.assets);\r\n      }\r\n     );\r\n  }\r\n\r\n  calculate(myAssets: asset[]){\r\n    new Promise (res=>{\r\n      myAssets.forEach(element => \r\n        {\r\n          this.totOut += (element.totalMoneyOut * 1);\r\n          this.totIn += (element.totalMoneyIn * 1);\r\n          this.currTotal += (element.currentTotal * 1);\r\n          this.orgMoney += (element.originalMoney * 1);\r\n        })\r\n        return res();\r\n    }).then(res=>{\r\n      this.portfolio.currentTotal = this.currTotal.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\r\n      this.portfolio.totalMoneyIn = this.totIn.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\r\n      this.portfolio.totalMoneyOut = this.totOut.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\r\n      this.portfolio.originalMoney = this.orgMoney.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\r\n    })\r\n  }\r\n\r\n}\r\n","export class portfolio {\n    currentTotal: any;\n    totalMoneyIn: any;\n    totalMoneyOut: any;\n    originalMoney: any;\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { transaction } from './transactions';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TransactionsService {\r\n  private Url = 'http://localhost:8080/api/';  // URL to web api\r\n\r\n  constructor(private http: HttpClient) { }\r\n \r\n  // get all transactions regardless of bought or sold\r\n  getAllTransactions (): Observable<transaction[]> {\r\nreturn this.http.get<transaction[]>(this.Url+'allTransactions')\r\n  }\r\n\r\n  // get all transactions depending on transaction type\r\n  getTransactions (transactionType: string): Observable<transaction[]> {\r\n    if(transactionType===\"buy\")\r\n    {\r\n      return this.http.get<transaction[]>(this.Url+'allTransactions/:true')\r\n    }  else if(transactionType===\"sell\") {\r\n      return this.http.get<transaction[]>(this.Url+'allTransactions/:false')\r\n    } else {\r\n      return this.http.get<transaction[]>(this.Url+'allTransactions')\r\n    }\r\n  }\r\n\r\n   // get all transactions of an Asset depending on transaction type\r\n   getTransactionsByAsset (transactionType: string, assetSymbol: string): Observable<transaction[]> {\r\n    if(transactionType===\"true\")\r\n    {\r\n      return this.http.get<transaction[]>(this.Url+'allAssetTypeTransactions/true/' + assetSymbol)\r\n    }  else if(transactionType===\"false\") {\r\n      return this.http.get<transaction[]>(this.Url+'allAssetTypeTransactions/false/' + assetSymbol)\r\n    }\r\n    // Return all transactions belonging to the asset Symbol \r\n    else \r\n    { \r\n      return this.http.get<transaction[]>(this.Url+'allAssetTransactions/' + assetSymbol)\r\n    }\r\n  }\r\n\r\n  addTransaction (asset: transaction): Observable<transaction> {\r\n    return this.http.post<transaction>(this.Url+'Transaction', asset, httpOptions);\r\n  }\r\n}\r\n","export class transaction {\r\n    id: number;\r\n    symbol: string;\r\n    shares: any;\r\n    price: any;\r\n    buydate: Date;\r\n    transaction: Boolean;\r\n    total: any;\r\n    gain: any;\r\n}\r\n\r\n","export class whatIfAsset {\n    whatIfPrice:      any;\n    totalMoneyOut:    any;\n    pureProfit:       any;\n    pureProfitMargin: any;\n    sharesToSell:     any;\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}